
; defino los registros en donde van a ir las salidas
; 
CONSTANT control_listo ,  01      
CONSTANT control_escribe, 02     
CONSTANT control_lee,     03        
CONSTANT escribe_dato,    04       
CONSTANT escribe_dir,     05      

; defino los puertos de entrada, los que van al MUX de los esquematicos
CONSTANT listo,                     06
CONSTANT listo_escribe,             07
CONSTANT listo_lee,                 08

; defino los valores que voy a ocupar en el transcurso, ingresar acá cada registro necesario

NAMEREG status,                        s0
NAMEREG dat_dir_0,                     s1
NAMEREG dat_dir_1,                     s2
NAMEREG dat_dir_2,                     s3
NAMEREG uno,                           s4
NAMEREG listo_reg,                     s5 ; prueba


Iniciar:            LOAD      dat_dir_0, 02
                    LOAD      dat_dir_1, 10
                    LOAD      dat_dir_2, 00
                    LOAD      dat_dir_3, D2
                    LOAD      uno,       01
                    LOAD      listo_reg, 01 ; para probar el bucl
    
                    CALL      secuencia_de_inicializacion
                    CALL      leer; lee los datos provenientes del rtc
                    CALL      escribir; tener en cuenta las interrupcones
                    
;La maquina de estados 'iniciar' debe generar una bandera cuando le llegue cuando el pico le envie control_listo en alto, 
;hasta que la maquina no envie listo en alto se esperara mediante el cilo la carga de los datos, cuando esta termine levanta 
; la bandera de listo y se sale del ciclo, asi como el pico pone a control_listo en bajo
;ciclo_listo se intancia en secuencia_de_inicializacio, cuando bucle de c-listo, se hace un jump a leer para conocer el estado 
; del rtc

secuencia_de_inicializacion:   OUTPUT   dat_dir_0, escribe_dir
                               OUTPUT   dat_dir_1, escribe_dato
                               CALL      ciclo_listo ;  acomadar dentro del inicializado
                               ; falta algo
                               OUTPUT   dat_dir_0, escribe_dir
                               OUTPUT   dat_dir_2, escribe_dato
                               CALL      ciclo_listo ;  acomadar dentro del inicializado
                               ; falta algo  
                               OUTPUT   dat_dir_1, escribe_dir
                               OUTPUT   dat_dir_3, escribe_dato
                               CALL      ciclo_listo ;  acomadar dentro del inicializado
                               ; falta algo 
                               RETURN
ciclo_listo:        SUB       uno, listo
                    JUMP      NZ, ciclo_listo
                    RETURN       

; la escritura se debe realizar con interrupciones, ya que se utliza un perifirico para realizarla (teclado)
